---
title: "CMPT 120 Lecture 7-1"
date: "2023-10-16"
author: "Prof. Nick Vincent"
institute: "Simon Fraser University"
format:
  revealjs:
    slide-number: true
    chalkboard: 
      buttons: false
    theme: solarized
jupyter: python3
---

## 7-1 Housekeeping
Review announcements

- Midterm, assignment, 

## 7-1 

- Review final learning goal for midterm: min and max
- Talk through completed example of recommender system
- New material: bits, bytes, and codes

```{python}
#| echo: true
#| output-location: slide
# placeholder 1
```

```{python}
#| echo: true
# placeholder 2
```

## Min and max

Pseudo code:

- Initialize a variable to hold max (min). It should be smaller (larger) than items
- Iterate through items
- If item is larger (smaller) thatn current value of variable, store it in our variable
- After all items are seen, we have the max

## Question: Write the code

## Question

How to keep track of the *index* of the max or min?


## Review rec sys
```{python}
#| echo: true
#| output-location: slide
# select a user + init variables to keep track of scores
index_of_user = 17
top_score = 0
top_record = ""
recommendation = ""

# load data
with open("fake_data.csv", "r") as file:
    all_lines = file.readlines()
    header = all_lines[0]
    records = all_lines[1:]

    user_record = records[index_of_user].strip().split(",")

    # use a loop to go through all other record lines (one record = one user)
    for record in records:
        columns = record.strip().split(",")

        if user_record[0] == columns[0]:
            print("Skipping ", record)
            continue

        score_for_current_record = 0
        # split each record line into a list of items
        
        # use a nested loop to go through each item
        # use manually defined [1,3,4,5] to get only
        # favorite_movie, party, diet (skip)
        for column_index in [1,3,4]:
            if columns[column_index] == user_record[column_index]:
                score_for_current_record += 1
        
        if score_for_current_record > top_score:
            top_score = score_for_current_record
            top_record = record
            recommendation = columns[2]

print("You are", user_record)

print("After careful consideration, we have found that the most similar user is")
print(top_record)
print(f"You have a similarity score of {top_score}")

print("We recommend you watch", recommendation)
```


## Concept review: Nested loops

- What does it mean to have a nested loop?

## Answer:
Loop within a loop!

basic breakdown of how nested loops work:
- The outer loop begins its first iteration.
- As the outer loop runs, it encounters the inner loop.
- The inner loop then runs to completion.
- Once the inner loop finishes, the outer loop moves to its next iteration and the inner loop runs again.
- This process continues until the outer loop has completed all of its iterations.


## Concept review: Max
To find the person with a max or min score in a file, how many variables do you need to use? What data types will you use?

## Concept review: Lists
How do we add items to a list?

How do we access the second item of a list?

How do we access the second to last item of a list?



## Binary numbers and ASCII
- New content!
- Not on midterm.
- Why learn: it's how information is stored on our computers

## Immersion program
01001000 01100101 01101100 01101100 01101111 00100000 01010111 01101111 01110010 01101100 01100100

## Just kidding!

## 
Fun fact -- there's a binary message in the room where I studied computing science!
https://newsroom.ucla.edu/stories/a-coded-message-hidden-in-floor-247232

## Why binary 
- What are (digital) computers?
- Machines that convert low and high electrical signals into 0's and 1's
- Then we do some magic with the 0's and 1's

## Bits
A bit is single unit of information that has either the value zero or one

- 0
- 1

## Bytes
A byte is 8 bits

## Using decimal to represent numbers
In "decimal" (aka numbers you are used to seeing), e.g. 10, 250, 11713
each digit represents powers of ten. 

In the number '345'
the 3 represents 3 * 10^3 = 300, because 10^3=100
the 4 represents 4 * 10^2= 40
The 5 represents 5 * 10^1 = 5

As we add digits to the *left* hand side of our decimal numbers, we get higher powers of ten

## Using binary to represent numbers
In the binary the bits represents powers of 2

- 1 (2^0)
- 2 (2^1)
- 4 (2^2 = 2 * 2)
- 8 (2^3 = 2 * 2 * 2)
- 16 (2^4 = 2 * 2 * 2 * 2)
- ...

## Example of 2 digit binary numbers

- 00 -> 0
- 01 -> 1
- 10 -> 2
- 11 -> 3

## Example of 3 digit binary numbers

- 00

## Challenge
- What is the maximum number we can store with 4 bits
- What about a byte
- Extreme challenge (trying using your Python terminal): 4 bytes

## Answer
```{python}
def max_number_for_bits(n_bits):
    return 2**n_bits - 1

# Example usage:
n_bits = 4
print(f"The maximum number that can be stored with {n_bits} bits is {max_number_for_bits(n_bits)}")
```

## ASCII
- ASCII is a table that maps decimal numbers to characters
- So, if we have a binary number, we can map it to a decimal number and then to a character


## Converting binary to decimal in Python

- Any ideas how we'd do it?

## Converting binary to decimal in Python: the answer
def binary_to_decimal(binary_str):
    decimal = 0
    length = len(binary_str)
    for i, bit in enumerate(binary_str):
        decimal += int(bit) * (2 ** (length - i - 1))
    return decimal

# Example usage:
binary_str = "1101"
print(f"The decimal representation of binary {binary_str} is {binary_to_decimal(binary_str)}")


## With an extra built-in method

```{python}
def binary_to_decimal(binary_str):
    return int(binary_str, 2)

# Example usage:
binary_str = "1101"
print(f"The decimal representation of binary {binary_str} is {binary_to_decimal(binary_str)}")
```


## Question: What's this code?

00FFAA

## Another numbering system: Hexadecimal

- Used for color representations


## And more!

- Unicode
- Mojibake
  - https://en.wikipedia.org/wiki/Mojibake