---
title: "CMPT 120: Code for Bits and Bytes content"
date: "2023-10-25"
author: "Prof. Nick Vincent"
institute: "Simon Fraser University"
format:
  revealjs:
    slide-number: true
    chalkboard: 
      buttons: false
    theme: solarized
jupyter: python3
---


## Max number of bits
```{python}
#| echo: true
def max_number_for_bits(n_bits):
    return 2**n_bits - 1
# Example usage:
n_bits = 4
print(f"The maximum number that can be stored with {n_bits} bits is {max_number_for_bits(n_bits)}")
```

## Converting binary to decimal in Python
```{python}
#| echo: true
binary_str = "1101"
decimal = 0
length = len(binary_str)

for i in range(length):
    bit = binary_str[i]
    if bit == '1':
        decimal += 2 ** (length - i - 1)

print(f"The decimal representation of binary {binary_str} is {decimal}")
```

## With a few bells and whistles
```{python}
#| echo: true
def binary_to_decimal(binary_str):
    decimal = 0
    length = len(binary_str)
    for i, bit in enumerate(binary_str):
        decimal += int(bit) * (2 ** (length - i - 1))
    return decimal
```

# Example usage:
```{python}
#| echo: true
binary_str = "1101"
print(f"The decimal representation of binary {binary_str} is {binary_to_decimal(binary_str)}")
```

## With an extra built-in method

```{python}
#| echo: true
def binary_to_decimal(binary_str):
    return int(binary_str, 2)

# Example usage:
binary_str = "1101"
print(f"The decimal representation of binary {binary_str} is {binary_to_decimal(binary_str)}")
```

## Parallel lists
```{python}
#| echo: true
print("Lets find the most popular coffee shop")

survey_responses = [
    "tims", "sbux", "ren", "tims", "sbux", "blenz",
    "blenz", "ren", "blenz"
]
options = ["tims", "sbux", "ren", "blenz"]

list_of_counting_vars = len(options) * [0]

# you could also init an empty array and use += or append
# basically, we want a list of [0,0,0,0], but without hardcoding

for response in survey_responses:
    # if processing file, we might need to strip, split, etc. 
    for i in range(len(options)):
        if options[i] == response:
            list_of_counting_vars[i] += 1

for i in range(len(options)):
    print(options[i], list_of_counting_vars[i])
```

## Example ASCII <-> Dec
```{python}
#| echo: true
dec = ["65", "66", "67"]
chars = ["A", "B", "C"]

characters_as_dec = ["65", "65", "65", "67", "67", "67"]

for i in range(len(characters_as_dec)):
    for j in range(len(dec)):
        if characters_as_dec[i] == dec[j]:
            print(chars[j])
```